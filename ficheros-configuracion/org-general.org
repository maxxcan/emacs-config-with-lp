#+title: Configuración de org-general
#+AUTHOR: Maxxcan Fox
#+EMAIL: maxxcan@disroot.org

* Introducción 

Org mode es una navaja suiza para Emacs en particular y para la vida en general, para muchos es una killer app que tiene Emacs,de hecho, algunas personas solo usan Emacs por Org mode. 

Este solo es uno de los muchos ficheros de configuración que haremos para org mode ya que tiene tantas cosas que si lo hicieramos todo en uno nos saldría un fichero tremendamente largo.

* Ficheros a usar

Inicialmente solo vamos a configurar algunas cosas relacionadas con la gestión de tareas y el GTD con org mode.

Para empezar vamos a definir unos ficheros que tengo en el directorio GTD, para añadir cosas como tareas, notas, etc. 

Primero vamos a definir el path, cada uno que ponga el suyo 

#+name: path
#+BEGIN_SRC emacs-lisp
~/Documentos/GTD/
#+END_SRC

Vamos a definir qué ficheros van a llevar los ficheros de la agenda y de las notas.

#+name: agenda-y-notas
#+BEGIN_SRC emacs-lisp :noweb yes

;; definiendo ficheros de agenda y notas
(setq org-agenda-files (list "<<path>>GTD.org"))
(setq org-defaul-notes-file "<<path>>notas.org")
;; y añadiendo además en la agenda las tareas diarias y las sinhacer
(setq org-agenda-include-diary t)
(setq org-agenda-include-all-todo t)

#+END_SRC

* Aspecto y etiquetas de las tareas

Ahora vamos a definir nuestras etiquetas de  tareas para que además de los TODO, DONE, que tiene por defecto tenga otros y además le definiremos distintos colores 

#+name: tareas-y-colores
#+BEGIN_SRC emacs-lisp
 ;; Define a kanban style set of stages for todo tasks
  (setq org-todo-keywords
        '((sequence "PORHACER" "ENPROCESO" "BLOQUEADO" "REVISION" "|" "HECHO" "ARCHIVADO")))

  ;; Setting Colours (faces) for todo states to give clearer view of work
  (setq org-todo-keyword-faces
        '(("PORHACER" . org-warning)
          ("ENPROCESO" . "yellow")
          ("BLOQUEADO" . "red")
          ("REVISION" . "orange")
          ("HECHO" . "green")
          ("ARCHIVADO" .  "blue")))

  ;; Progress Logging
  ;; When a TODO item enters DONE, add a CLOSED: property with current date-time stamp
  (setq org-log-done 'time)
#+END_SRC

* Definiendo un calendario chulo

Aunque esto require un paquete extra el calfw-org, lo añadiré ahora porque con el tendremos un calendario muy resultón donde aparecerán nuestras tareas.

Para acceder a él escribiremos M-x: cfw-caledario.

Además vamos a hacerle unos ajustes de aspecto, como poner que empiece el calendario en Lunes, por defecto lo hace en Domingo y además poner los meses y los días de la semana en español.

#+name: calendario
#+BEGIN_SRC emacs-lisp
(use-package calfw-org
:ensure  t
:config 
(setq cfw:org-overwrite-default-keybinding t)
(setq calendar-week-start-day 1)
(setq calendar-month-name-array
      ["Enero" "Febrero" "Marzo" "Abril" "Mayo" "Junio"
       "Julio"    "Agosto"   "Septiembre" "Octubre" "Noviembre" "Diciembre"])
(setq calendar-day-name-array
      ["Domingo" "Lunes" "Martes" "Miércoles" "Jueves" "Viernes" "Sábado"]))
#+END_SRC

* Funciones propias

Ahora vamos a crear unas funciones muy simples que simplemente nos van a ayudar a acceder fácilmente a nuestros ficheros de Actividades, tareas y notas, escribiendolo en el mini-buffer con M-x

#+name: funciones-tareas
#+BEGIN_SRC emacs-lisp
(defun gtd ()
  "Entrada principal para el archivo gtd"
  (interactive)
  (find-file "~/Documentos/GTD/GTD.org"))

(defun actividades ()
  "Entrada para el archivo de actividades"
  (interactive)
  (find-file "~/Documentos/GTD/Actividades.org"))

(defun notas ()
  "Entraa para el archivo de notas"
  (interactive)
  (find-file "~/Documentos/GTD/notas.org"))
#+END_SRC

* Indentando código en los bloques org-bable 

#+name: code-indent
#+BEGIN_SRC emacs-lisp

(setq org-src-tab-acts-natively t)

#+END_SRC


* Juntando todo el código

#+BEGIN_SRC emacs-lisp :noweb yes :tangle ~/.emacs.d/config/org-general.el :padline no :results silent 
<<agenda-y-notas>>
<<tareas-y-colores>>
<<calendario>>
<<funciones-tareas>>
<<code-indent>>
#+END_SRC

* Exportando


Tal como he indicado en la propia plantilla para exportar el código podemos usar la combinación de teclas C-c C-v t (C es control) o bien escribir en el minibuffer con Alt-x, org-babel-tangle

Como vemos al final hay dos conjuntos de código que tienen la orden :tangle y nombre de archivo. Ese tangle significa que ese código se generará en un fichero que le hemos indicado.
