#+title: common-lisp
#+AUTHOR: Maxxcan Fox
#+EMAIL: maxxcan@disroot.org

* Introducción

Emacs se intregra perfectamente para el desarrollo de Common Lisp sobre todo con paquetes tales como Slime. Pero otra opción son es usar [[https://github.com/joaotavora/sly][Sly]], o como se llaman ellos *Sylvester el Gato* que es un fork de [[https://www.common-lisp.net/project/slime/][Slime]]. Para ver las diferencias lo mejor es ver sus respectivas webs.

* Configuración necesaria

Vamos a ver la configuración básica 

#+name: sly
#+BEGIN_SRC emacs-lisp
(use-package sly
:ensure t
:defer t
:commands sly 
:config 
(setq inferior-lisp-program "sbcl"))
#+END_SRC

Además añadiremos otros maquetes básicos.

#+name: sly-plus
#+BEGIN_SRC emacs-lisp

;;;;;;;;;;;;;;;;;;;;;;;;
(use-package sly-asdf
:ensure t
:defer t
)

(use-package sly-macrostep
:ensure t
:defer t)

(use-package sly-named-readtables
:ensure t
:defer t)

(use-package sly-quicklisp
:ensure t
:defer t)

(use-package sly-repl-ansi-color
:ensure t
:defer t
:config
(push 'sly-repl-ansi-color sly-contribs))

(use-package ac-sly
:ensure t
:defer t)

;;;;;;;;;;;;;;;;;;;;;;;;;

#+END_SRC

* Juntando el código

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/config/sly.el :noweb yes :padline no :results silent
<<sly>>
<<sly-plus>>
#+END_SRC

* Exportando

Tal como he indicado en la propia plantilla para exportar el código podemos usar la combinación de teclas C-c C-v t (C es control) o bien escribir en el minibuffer con Alt-x, org-babel-tangle

Como vemos al final hay dos conjuntos de código que tienen la orden :tangle y nombre de archivo. Ese tangle significa que ese código se generará en un fichero que le hemos indicado.
