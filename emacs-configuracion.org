#+title: Emacs configuration with use-package
#+author: Maxxcan Fox
#+email: maxxcan@disroot.org
#+date: <2019-09-14 sáb>

* Introducción

Esta configuración la he creado basándome en varios sitios y lugares para intentar ser una configuración en el que solo haya que bajar este fichero, generar el fichero de configuración de Emacs y que todo funcione lo mejor posible instalando los paquetes necesarios. 

La configuración de use-package para que automáticamente instale los paquetes necesarios la he sacado del blog [[http://cachestocaches.com/2015/8/getting-started-use-package/][caches to caches]]. 

También de [[https://github.com/bbatsov/emacs.d/blob/master/init.el][https://metaredux.com/]]

Otras configuraciones las he sacado de los respectivos sitios de los paquetes que configura. 

* Copyright y notas

#+name: copyright
#+BEGIN_SRC emacs-lisp
;;; init --- Initialization code for emacs

;; Copyright (c) 2019 Maxxcan Fox

;; Author: Maxxcan Fox <maxxcan@disroot.org>
;; Maxxcan Fox <maxxcan@disroot.org>
;; Created: 12-12-19

;; Keywords: configuration
;; Homepage: https://github.com/maxxcan/

;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License as
;; published by the Free Software Foundation; either version 2 of
;; the License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be
;; useful, but WITHOUT ANY WARRANTY; without even the implied
;; warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
;; PURPOSE.  See the GNU General Public License for more details.

;;; Commentary:
;; Calls my Emacs configuration files after installing use-package, which is
;; necessary for operation.  See also:
;;      http://www.cachestocaches.com/2015/8/getting-started-use-package/
;;


#+END_SRC

* Información del usuario

#+name: name
#+BEGIN_SRC emacs-lisp
Maxxcan Fox
#+END_SRC


#+name: mail-address
#+BEGIN_SRC emacs-lisp
maxxcan@disroot.org
#+END_SRC


#+name: user
#+BEGIN_SRC emacs-lisp :noweb yes
;;
;; with this variable set the name and e-mail of user
;;
(setq user-full-name "<<name>>")
(setq user-mail-address "<<mail-address>>")

#+END_SRC

* Instalación, configuración y uso de use-package

Para instalar de forma automática los paquetes que necesitemos usando use-package añadiremos el siguiente script: 

#+name: use-package
#+BEGIN_SRC emacs-lisp
;;;
;;;;; install the melpa repository
;;
(require 'package)
(setq package-archives (append package-archives
			       '(("melpa" . "http://melpa.org/packages/"))))
(package-initialize)

;; Bootstrap 'usepackage
(unless (package-installed-p 'use-package)
(package-refresh-contents)
(package-install 'use-package))

;; Enable use-package

(eval-when-compile
  (require 'use-package))
(require 'bind-key)


;; Set the path variable
(use-package exec-path-from-shell
  :ensure t
  :config (exec-path-from-shell-initialize))


#+END_SRC

* Recogida de basura 

#+name:garbage
#+begin_src emacs-lisp
;; reduce the frequency of garbage collection by making it happen on
;; each 50MB of allocated data (the default is on every 0.76MB)
(setq gc-cons-threshold 50000000)

;; warn when opening files bigger than 100MB
(setq large-file-warning-threshold 100000000)


#+end_src

* Algunas configuraciones estéticas iniciales

#+name: initial-bootstrap
#+begin_src emacs-lisp

;;disable startup screen

(setq inhibit-startup-screen t)

;; disable bar-mode and scroll-mode
(tool-bar-mode -1)
(toggle-scroll-bar -1)
(menubar-mode -1)

;; nice scrolling
  (setq scroll-margin 0
	scroll-conservatively 100000
	scroll-preserve-screen-position 1)

  ;; mode line settings
  (line-number-mode t)
  (column-number-mode t)
  (size-indication-mode t)


  ;; replace buffer-menu with ibuffer
  (use-package ibuffer 
  :ensure t
  :config
  (global-set-key (kbd "C-x C-b") #'ibuffer))

#+end_src 
* Añadiendo archivos recientes
* Añadiendo el tema doom y su modeline

#+name: theme
#+begin_src emacs-lisp
(use-package doom-themes
:ensure t
:config
(load-theme 'doom-dracula t))

(use-package doom-modeline
:ensure t
:hook (after-init . doom-modeline-mode))

;;;;;;;;;;;;
#+end_src

Añadimos la opción de que nos muestre los archivos recientes.

#+NAME: recent-files
#+BEGIN_SRC emacs-lisp
(recentf-mode 1)
#+END_SRC

* Autopair y company 

Vamos a instalar dos paquetes muy intersantes para escribir código. El *autopair* que sirve para que nos termine paréntesis, llaves, etc, y el paqute *company* para el autocompletado. Podemos ir primeramente a las webs de [[https://github.com/joaotavora/autopair][autopair]] y [[https://company-mode.github.io/][company]]. 


#+name: autopair-company 
#+BEGIN_SRC emacs-lisp
;; config autopair
;;;; to finish symbols like parentheses, brackets, etc.

(use-package autopair 
:ensure t
:config (autopair-global-mode))

;;
;;config company for the autocomplete
;;
(use-package company
:defer t
:ensure t
:config (add-hook 'after-init-hook 'global-company-mode))
;;;
;;
#+END_SRC

* Ivy y counsel

Ahora vamos a instalar una serie de paquetes que nos van a hacer la vida más fácil a la hora de trabajar con Emacs. 

 Por un lado tenemos a  [[https://oremacs.com/swiper/][Ivy]]. Ivy es un sistema que autocompletado en diversos contextos como son menús, en el mini-buffer, código, etc. Lo mejor es verlo funcionar y ver como nos ayuda mucho a trabajar con Emacs. 

 Al mismo tiempo que *Ivy* vamos a instalar dos paquetes más que son *swiper y counsel*. Ambos ayudan mucho al trabajo con Emacs. Swiper ayuda a la búsqueda de texto dentro de un fichero y counsel ayuda a la búsqueda de comandos dentro del mini-buffer.  

#+name: ivy
#+begin_src emacs-lisp

  (use-package ivy
  :ensure t
  :config 
   (setq ivy-use-virtual-buffers t)
   (setq ivy-count-format "(%d/%d) "))

  (use-package swiper
  :ensure t
  :config 
  (global-set-key (kbd "C-s") 'swiper))


  (use-package counsel
  :ensure t
  :config 
   (global-set-key (kbd "M-x") 'counsel-M-x)
   (global-set-key (kbd "C-x C-f") 'counsel-find-file)
   (global-set-key (kbd "<f1> f") 'counsel-describe-function)
   (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
   (global-set-key (kbd "<f1> l") 'counsel-find-library)
   (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
   (global-set-key (kbd "<f2> u") 'counsel-unicode-char))
#+end_src

* Configuraciones básicas para Orgmode

Org mode es una de las mejores maravillas que tiene Emacs. Se le suele llamar una skill app dentro de Emacs. Darían muchos documentos para explicar todo lo que se puede hacer con org-mode pero al menos para empezar podemos hacer que sea agradable a la vista y más cómodo de usar. Para ellos nos basaremos en un artículo de *Howard Abrams* llamado *org-mode como un procesador de texto* que podemos encontrar [[http://www.howardism.org/Technical/Emacs/orgmode-wordprocessor.html][aquí]]. 

 De ese artículo podemos sacar la siguiente configuración: 
 
** Para que cuando usemos * / o _ para resaltar texto, estos símbolos no aparezcan:

 #+name: org-hide-emphansis 
 #+BEGIN_SRC emacs-lisp :noweb yes

(use-package org
:ensure t
:config
(setq org-hide-emphasis-markers t))

 #+END_SRC 

** Para mejorar los bullets y que sean más bonitos

 #+name: bullets-format
 #+begin_src emacs-lisp :noweb yes
 (font-lock-add-keywords 'org-mode
                         '(("^ +\\([-*]\\) "
                            (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
 #+end_src 

** Mejorando aún más el aspecto de los bullets gracias al paquete *org-bullets*

#+name: org-bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
:ensure t
:config 
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
;;;;;;
#+END_SRC 

** Adaptando el texto a la ventana
Finalmente haremos que cuando se visualice un fichero con extensión .org éste se adapte a la ventana y cuando la línea llegue al final de ésta haga un salto de carro. Para ellos añadiremos la línea 

#+name: visual-line
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'visual-line-mode)

;;;;
#+END_SRC

** Autocompletado para Org-mode 

Para activar el autocompletado en org instalremos el paquete *org-ac* y añadiremos la siguiente configuración:

#+name:org-ac
#+BEGIN_SRC emacs-lisp
(use-package org-ac
:ensure t
:config
(org-ac/config-default))
#+END_SRC 

** Todo el código org necesario

#+name: org
#+BEGIN_SRC emacs-lisp :noweb yes
<<org-hide-emphasis>>
<<bullets-format>>
<<org-bullets>>
<<visual-line>>
<<org-ac>>
#+END_SRC

* Añadiendo números de líneas
 En emacs tenemos mucha información en el mini-buffer como el nombre del archivo, el modo en el que está, los modos menores y la línea en la que estamos, pero hay que reconocer que muchas veces es más cómodo tener los números de línea a la izquierda del documento, junto a las líneas del documento. Para ello tenemos el paquete *nlinum* 

 Así que tendremos que instalarlo y añadirlo a nuestra configuración. 

 #+name: nlinum
 #+BEGIN_SRC emacs-lisp

(use-package nlinum
:ensure t
:config
(global-set-key (kbd "<f9>") #'nlinum-mode))

 #+END_SRC

* Añadiendo neo-tree para la navegación a través de los ficheros

Aunque es muy cómodo usar el programar *dired* para navegar entre los ficheros es muy práctico usar programas como neo-tree que es una versión para Emacs del neovim. Yo lo tengo configurado para que con la tecla <f8> se active. 

#+name: neotree
#+begin_src emacs-lisp
(use-package neotree
:ensure t
:config
(setq neo-theme 'icons)
(global-set-key [f8] 'neotree-toggle))

#+END_SRC

* Añadiendo dashboard para un inicio bonito
Para ponerle una pantalla de inicio bonito usaremos el paquete *dashboard* que es un paquete que usa Spacemacs en el inicio solo que adaptado para poder ser usado en cualquier Emacs aunque no usemos Spacemacs. La configuración básica es por ejemplo:

#+name: dashboard
#+BEGIN_SRC emacs-lisp
(use-package dashboard
:ensure t
:config
(dashboard-setup-startup-hook)

;; Set the title
(setq dashboard-banner-logo-title "Bienvenido al mejor Editor del Mundo -- Emacs --")


(setq dashboard-startup-banner 'logo)
;; Value can be
;; 'official which displays the official emacs logo
;; 'logo which displays an alternative emacs logo
;; 1, 2 or 3 which displays one of the text banners
;; "path/to/your/image.png" which displays whatever image you would prefer

;; Content is not centered by default. To center, set
(setq dashboard-center-content nil)

;; To disable shortcut "jump" indicators for each section, set
(setq dashboard-show-shortcuts nil)

;;To customize which widgets are displayed, you can use the following snippet

(setq dashboard-items '((recents  . 5)
                        (projects . 5)
                        (agenda . 5)))

(setq dashboard-set-heading-icons t)
(setq dashboard-set-file-icons t)

(dashboard-modify-heading-icons '((recents . "file-text")
                                  (bookmarks . "book")))

(setq dashboard-set-init-info t)


(add-to-list 'dashboard-items '(agenda) t)

(setq show-week-agenda-p t))

;;;;;;;;;;;;;
#+END_SRC

* Instalando projectile
Projectile es un gestor de proyectos. Lo instalamos ya que lo pide dashboard.

#+name: projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :config
  (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  (projectile-mode +1))
#+END_SRC
* Instalando Smex y which-key
Finalmente instalaremos dos paquetes que son muy útiles. El primero de ellos es *smex* el cual consigue que cuando empecemos a escribir un comando tras pulsar M-x los comandos que nos pongan primero gracias a counsel sean los que más hemos usado. 

El segundo paquete es which-key y éste vale para cuando empecemos a usar las combinacionesde teclas. Este paquete lo que hace es que a la vez que vamos ejecutando las combinaciones de teclas se nos muestra una lista de qué siguiente combinación de teclas sigue y qué comando ejecutará.

#+name: smex-whichkey
#+BEGIN_SRC emacs-lisp
;; iniciamos Smex
(use-package smex
:ensure t
:config 
(smex-initialize))
;;;
;; iniciamos el paquete which-key
(use-package which-key
:defer 10
:ensure t
:config
(which-key-setup-minibuffer)
(which-key-mode 1))
;;;
;;
#+END_SRC
* Rainbow para que dibuje de distintos colores los  delimitadores
Rainbow-delimiters es un paquete que colorea de distintos colores para que cuando trabajamos con muchos paréntesis, corchetes, etc, veamos la diferencia.
#+name: rainbow
#+begin_src emacs-lisp
(use-package rainbow-delimiters
:ensure t
:defer t
:config
(add-hook 'prog-mode-hook #'prog-delimiters-mode))
#+END_SRC

* Usando el propio navegador de Emacs por defecto

Por defecto, Emacs que se adapta muy bien al entorno donde estés trabajando abrirá el navegador que tengas configurado en tu escritorio por defecto cuando quieras abrir un enlace. Si en vez de que abra el navegador por defecto quieres que no salga de Emacs y use su propio navegador en modo texto añadiremos la siguiente línea de configuración a nuestro fichero de configuración

#+name: eww
#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function 'eww-browse-url)
#+END_SRC

* Separando la restante configuración en ficheros separados
A partir de aquí prefiero dejar el fichero principal de configuración con poco contenido y el resto de configuraciones que sean ficheros pequeños con la configuración justa para los paquetes necesarios. Para eso añadiremos en el fichero principal de configuracón un archivo que lo que hace es cargar la configuración de todos los ficheros de configuración que hayan en su mismo directorio, y luego además escribimos una orden (cargada antes  de ese fichero) para que carguen todos los ficheros de ese directorio.

Además definimos el path que variará según tu versión de Emacs

#+name: config-path
#+BEGIN_SRC emacs-lisp
~/.emacs.d/config
#+END_SRC


Además vamos a crear  el fichero load-directory que es el que carga todos los ficheros de configuración de ese directorio, también recordar que hay que crear el directorio primero.


#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/config/load-directory :mkdirp yes

(defun load-directory (directory)
  "Load recursively all `.el' files in DIRECTORY."
  (dolist (element (directory-files-and-attributes directory nil nil nil))
    (let* ((path (car element))
           (fullpath (concat directory "/" path))
           (isdir (car (cdr element)))
           (ignore-dir (or (string= path ".") (string= path ".."))))
      (cond
       ((and (eq isdir t) (not ignore-dir))
        (load-directory fullpath))
       ((and (eq isdir nil) (string= (substring path -3) ".el"))
        (load (file-name-sans-extension fullpath)))))))

#+END_SRC


#+name: load-directory
#+BEGIN_SRC emacs-lisp :noweb yes
;; cargamos el fichero load-directory 
(load "<<config-path>>/load-directory")
(load-directory "<<config-path>>")
;;;
;;;
#+END_SRC

** Añadiendo fichero por fichero 

Con la configuración anterior añadimos por defecto toda la configuración que pongamos en el directorio definido en el último código y la única forma de que no cargue esa configuración es eliminando el fichero del directorio. 
Otra forma para añadir mayor control es añadir el directorio al path e ir añadiendo fichero por fichero con la palabra clave *require*. Eso sí, para que esto funcione los ficheros de configuración .el tienen que terminar con la línea *(provide 'nombre-fichero)* y luego escribiremos ese *nombre-fichero* usando *require* de la forma *(require 'nombre-fichero)*. Así vamos añadir el path para poder añadir fichero por fichero. 

#+name: añadir-path
#+BEGIN_SRC emacs-lisp :noweb yes
(add-to-list 'load-path "<<config-path>>")
#+END_SRC

Tenemos toda la información en el [[https://www.emacswiki.org/emacs/LoadingLispFiles][wiki de Emacs]].

* Juntando todo el código

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init :noweb yes :padline no :results silent
<<copyright>>
<<user>>
<<use-package>>
<<initial-bootstrap>>
<<recent-files>>
<<theme>>
<<autopair-company>>
<<ivy>>
<<org>>
<<nlinum>>
<<neotree>>
<<dashboard>>
<<projectile>>
<<smex-whichkey>>
<<rainbow>>
;;<<eww>>
<<load-directory>>
<<<<<<< HEAD
;;<<añadir-path>>
=======
<<añadir-path>>
>>>>>>> acf28f79e78164945d478e460daea651eb34b921
#+END_SRC

* Exportando 

Tal como he indicado en la propia plantilla para exportar el código podemos usar la combinación de teclas C-c C-v t (C es control) o bien escribir en el minibuffer con Alt-x, org-babel-tangle

Como vemos al final hay dos conjuntos de código que tienen la orden :tangle y nombre de archivo. Ese tangle significa que ese código se generará en un fichero que le hemos indicado.
